{"/home/travis/build/npmtest/node-npmtest-enclose/test.js":"/* istanbul instrument in package npmtest_enclose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enclose/lib.npmtest_enclose.js":"/* istanbul instrument in package npmtest_enclose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_enclose = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_enclose = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-enclose/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-enclose && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_enclose */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_enclose\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_enclose.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_enclose.rollup.js'] =\n            local.assetsDict['/assets.npmtest_enclose.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_enclose.__dirname + '/lib.npmtest_enclose.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-enclose/node_modules/enclose/bin/enclose.js":"#!/usr/bin/env node\n\n/* eslint no-continue:0 */\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar assert = require(\"assert\");\nvar spawn = require(\"child_process\").spawn;\nvar spawnSync = require(\"child_process\").spawnSync;\nvar binariesJsonName = \"binaries.json\";\nvar binariesJson;\n\ntry {\n  binariesJson = JSON.parse(\n    fs.readFileSync(\n      path.join(\n        __dirname,\n        binariesJsonName\n      )\n    ), \"utf8\"\n  );\n} catch (_) {\n  assert(_);\n}\n\nfunction getSuffix(arch) {\n  return {\n    win32: {\n      x86: \"win32\",\n      x64: \"win64\"\n    },\n    linux: {\n      x86: \"linux-x86\",\n      x64: \"linux-x64\",\n      armv6: \"linux-armv6\",\n      armv7: \"linux-armv7\"\n    },\n    darwin: {\n      x86: \"darwin-x86\",\n      x64: \"darwin-x64\"\n    }\n  }[process.platform][arch];\n}\n\nfunction argsToObject(args) {\n  var o = { other: [] };\n  for (var i = 0; i < args.length;) {\n    var n = args[i];\n    if (i + 1 < args.length) {\n      var v = args[i + 1];\n      if (n === \"-a\" || n === \"--arch\") {\n        o.arch = v;\n        i += 2;\n        continue;\n      }\n      if (n === \"-v\" || n === \"--version\") {\n        o.version = v;\n        i += 2;\n        continue;\n      }\n      if (n === \"-l\" || n === \"--loglevel\") {\n        o.loglevel = v;\n        i += 2;\n        continue;\n      }\n    }\n    o.other.push(n);\n    i += 1;\n  }\n  return o;\n}\n\nfunction objectToArgs(argo) {\n  var s = argo.other.slice();\n  if (argo.arch) s.push(\"-a\", argo.arch);\n  if (argo.version) s.push(\"-v\", argo.version);\n  if (argo.loglevel) s.push(\"-l\", argo.loglevel);\n  return s;\n}\n\nfunction getArmArch() {\n  var cpu = fs.readFileSync(\"/proc/cpuinfo\", \"utf8\");\n  if (cpu.indexOf(\"vfpv3\") >= 0) return \"armv7\";\n  var name = cpu.split(\"model name\")[1];\n  if (name) name = name.split(\":\")[1];\n  if (name) name = name.split(\"\\n\")[0];\n  if (name && name.indexOf(\"ARMv7\") >= 0) return \"armv7\";\n  return \"armv6\";\n}\n\nfunction getArch() {\n  var arch = process.arch;\n  if (arch === \"ia32\") arch = \"x86\";\n  if (arch === \"arm\") arch = getArmArch();\n  return arch;\n}\n\nfunction getVersion() {\n  return \"modules\" + process.versions.modules;\n}\n\nfunction argsToObjectDefaults(args) {\n  var o = argsToObject(args);\n  if (!o.arch) {\n    o.arch = getArch();\n  }\n  if (!o.version) {\n    o.version = getVersion();\n    o.tryDefaultVersion = true;\n  }\n  return o;\n}\n\nfunction getBinary(version, suffix) {\n  var bjs = binariesJson[suffix];\n  if (!bjs) return null;\n  var v = version;\n  if (!bjs[v]) v = \"v\" + v;\n  var bjsv = bjs[v];\n  var link = (typeof bjsv === \"string\");\n  if (link) return getBinary(bjsv, suffix);\n  if (bjsv) bjsv.version = v;\n  return bjsv;\n}\n\nfunction getBinaryFromArgs(args) {\n\n  var argo = argsToObjectDefaults(args);\n\n  if (!binariesJson) {\n    throw new Error(\n      \"File '\" + binariesJsonName +\n      \"' not found. Reinstall EncloseJS\"\n    );\n  }\n\n  var arch = argo.arch;\n  var suffix = getSuffix(arch);\n  var version = argo.version;\n  var binary = getBinary(version, suffix);\n  if (!binary && argo.tryDefaultVersion) {\n    binary = getBinary(\"default\", suffix);\n  }\n\n  if (!binary) {\n    throw new Error(\n      \"Bad version '\" + version + \"' or \" +\n      \"architecture '\" + arch + \"'. \" +\n      \"See file '\" + binariesJsonName + \"'\"\n    );\n  }\n\n  binary.suffix = suffix;\n  return binary;\n\n}\n\nfunction handleSpawnError(error, full, binary) {\n\n  if (fs.existsSync(full)) {\n    throw new Error(\n     \"Your OS does not support \" +\n      binary.version + \"-\" + binary.suffix + \". \" +\n      \"Modify your --arch flag.\"\n    );\n  } else {\n    if (error.code === \"ENOENT\") {\n      throw new Error(\n       \"Compiler not found for \" +\n        binary.version + \"-\" + binary.suffix + \". \" +\n       \"Expected \" + full\n      );\n    } else {\n      throw error;\n    }\n  }\n\n}\n\nvar exec = function(args, cb) {\n\n  if (!cb) {\n    cb = function(error) {\n      if (error) throw error;\n    };\n  }\n\n  if (!args) args = [];\n  var binary;\n\n  try {\n    binary = getBinaryFromArgs(args);\n  } catch (error) {\n    return cb(error);\n  }\n\n  var full = path.join(\n    __dirname,\n    binary.enclose.name\n  );\n\n  var opts = { stdio: \"inherit\" };\n  var c = spawn(full, args, opts);\n  var counter = 0;\n\n  c.on(\"error\", function(error) {\n    assert(++counter === 0);\n    try {\n      handleSpawnError(error, full, binary);\n    } catch (error2) {\n      return cb(error2);\n    }\n  });\n\n  c.on(\"exit\", function(status) {\n    if (counter) return;\n    cb(null, status);\n  });\n\n};\n\nexec.sync = function(args, inspect) {\n\n  if (!args) args = [];\n  var binary = getBinaryFromArgs(args);\n\n  var full = path.join(\n    __dirname,\n    binary.enclose.name\n  );\n\n  var stdio = inspect || \"inherit\";\n  var opts = { stdio: stdio };\n  var c = spawnSync(full, args, opts);\n  var error = c.error;\n\n  if (error) {\n    return handleSpawnError(error, full, binary);\n  }\n\n  return inspect ? c : c.status;\n\n};\n\nfunction children(o, cb) {\n  Object.keys(o).some(\n    function(k) {\n      cb(o[k], k);\n    }\n  );\n}\n\nfunction downloads() {\n\n  var arch = getArch();\n\n  var suffixes = {\n    x86: [ \"x86\" ],\n    x64: [ \"x86\", \"x64\" ],\n    armv6: [ \"armv6\" ],\n    armv7: [ \"armv6\", \"armv7\" ]\n  }[arch].map(getSuffix);\n\n  if (!suffixes) {\n    throw new Error(\n      \"Unknown arch \" + arch\n    );\n  }\n\n  var items = [];\n\n  children(binariesJson, function(suffix, key) {\n    if (suffixes.indexOf(key) < 0) return; // *****\n    children(suffix, function(version) {\n      if (typeof version !== \"object\") return; // \"default\" string\n      children(version, function(binary) {\n        items.push(binary);\n      });\n    });\n  });\n\n  return items;\n\n}\n\nif (module.parent) {\n  module.exports = {\n    exec: exec,\n    downloads: downloads,\n    argsToObject: argsToObject,\n    objectToArgs: objectToArgs,\n    arch: getArch\n  };\n} else {\n  exec(\n    process.argv.slice(2)\n  );\n}\n","/home/travis/build/npmtest/node-npmtest-enclose/node_modules/enclose/postinstall.js":"#!/usr/bin/env node\n\n/* eslint no-bitwise:0 */\n/* eslint no-cond-assign:0 */\n/* eslint no-use-before-define:0 */\n\n\"use strict\";\n\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar parse = require(\"url\").parse;\nvar format = require(\"url\").format;\nvar crypto = require(\"crypto\");\nvar https = require(\"https\");\nvar async = require(\"async\");\nvar windows = process.platform === \"win32\";\nvar enclose = require(\"./bin/enclose.js\");\nvar downloads = enclose.downloads();\nvar bucket = \"https://enclosejs.s3.amazonaws.com\";\n\nprocess.stdout.write(\"Downloading precompiled binaries. Please wait ...\\n\");\n\nasync.mapSeries(downloads, function(download, cb) {\n\n  var name = download.name;\n  process.stdout.write(\"Downloading \" + name + \" ...\");\n  var fsname = path.join(__dirname, \"bin\", name);\n\n  async.waterfall([\n    function(next) {\n\n      var signature = \"\";\n\n      function finish(error) {\n        next(error, signature);\n      }\n\n      var loc = location(\".sha256\");\n      https.get(loc, function(res) {\n        if (res.statusCode !== 200) {\n          return finish(new Error([\n            res.statusCode, loc\n          ]));\n        }\n        res.on(\"data\", function(chunk) {\n          signature += chunk.toString();\n        }).on(\"end\", function() {\n          finish();\n        });\n      }).on(\"error\", function(error) {\n        finish(error);\n      });\n\n    },\n    function(signature, next) {\n\n      var file = fs.createWriteStream(fsname);\n      var hash = crypto.createHash(\"sha256\");\n      hash.setEncoding(\"hex\");\n      var read = 0;\n\n      var thresholds = [\n        10, 20, 30, 40, 50, 60, 70, 80, 90\n      ].map(function(t) {\n        return {\n          caption: t.toString() + \"%\",\n          value: t * download.size / 100 | 0\n        };\n      });\n\n      function progress(chunk) {\n        var was = read;\n        read += chunk.length;\n        thresholds.some(function(t) {\n          if (t.value > read) {\n            return true;\n          }\n          if (t.value >= was) {\n            process.stdout.write(\" \" + t.caption);\n          }\n        });\n      }\n\n      function remove(error) {\n        fs.unlink(fsname, function() {\n          next(error);\n        });\n      }\n\n      function end(back) {\n        file.end(function() {\n          hash.end(function() {\n            back();\n          });\n        });\n      }\n\n      function finish(error) {\n        end(function() {\n          if (error) {\n            return remove(error);\n          }\n          var have = hash.read();\n          if (have !== signature) {\n            return remove(new Error([\n              name, have, signature\n            ]));\n          }\n          process.stdout.write(\"\\n\");\n          next();\n        });\n      }\n\n      file.on(\"open\", function() {\n        var loc = location();\n        https.get(loc, function(res) {\n          if (res.statusCode !== 200) {\n            return finish(new Error([\n              res.statusCode, loc\n            ]));\n          }\n          res.on(\"data\", function(chunk) {\n            file.write(chunk);\n            hash.write(chunk);\n            progress(chunk);\n          }).on(\"end\", function() {\n            finish();\n          });\n        }).on(\"error\", function(error) {\n          finish(error);\n        });\n      });\n\n    },\n    function(next) {\n\n      if (windows) {\n        return next();\n      } else {\n        fs.stat(fsname, function(error, stat) {\n          if (error) return next(error);\n          var plusx = (stat.mode | 64 | 8).toString(8).slice(-3);\n          fs.chmod(fsname, plusx, next);\n        });\n      }\n\n    }\n  ], cb);\n\n  function location(append) {\n    var url = bucket + \"/\" + name + (append || \"\");\n    var p = parse(url), key, key_part;\n    if (key = process.env.ENCLOSEJS_KEY) {\n      if (key_part = key.split(\".\")[0]) {\n        p.pathname = \"/\" + key_part + p.pathname;\n        url = format(p);\n      }\n    }\n    return url;\n  }\n\n}, function(error) {\n  if (error) {\n    process.stdout.write(\"\\n\");\n    throw error;\n  }\n});\n"}